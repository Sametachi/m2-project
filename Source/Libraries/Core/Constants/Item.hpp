#pragma once

#include <cstdint>
#include "Controls.hpp"

namespace ITEM
{
	enum EItemDataControls
	{
		NAME_MAX_LEN				= 24,
		LIMIT_SLOT_MAX_NUM			= 2,
		VALUES_MAX_NUM				= 6,
		SMALL_DESCR_MAX_LEN			= 256,
		APPLY_MAX_NUM				= 3,
		SOCKET_MAX_NUM				= 3,
		MAX_COUNT					= 200,
		ATTRIBUTE_MAX_NUM			= 7,
		ATTRIBUTE_MAX_LEVEL			= 5,
		REFINE_MATERIAL_MAX_NUM		= 5,
		SOCKET_REMAIN_SEC			= 0,
	};

	enum EItemVnums
	{
		ELK_VNUM = 50026,
	};

	enum EAttrAddonTypes : int8_t
	{
		ATTR_ADDON_NONE,
		ATTR_DAMAGE_ADDON = -1,
	};

	enum ERefineType : uint8_t
	{
		REFINE_TYPE_NORMAL,
		REFINE_TYPE_NOT_USED1,
		REFINE_TYPE_SCROLL,
		REFINE_TYPE_HYUNIRON,
		REFINE_TYPE_MONEY_ONLY,
		REFINE_TYPE_MUSIN,
		REFINE_TYPE_BDRAGON,
	};

	enum EItemValueIdice : uint8_t
	{
		VALUE_DRAGON_SOUL_POLL_OUT_BONUS_IDX = 0,
		VALUE_CHARGING_AMOUNT_IDX = 0,
		VALUE_SECONDARY_COIN_UNIT_IDX = 0,
	};
	enum EItemDragonSoulSockets : uint8_t
	{
		SOCKET_DRAGON_SOUL_ACTIVE_IDX = 2,
		SOCKET_CHARGING_AMOUNT_IDX = 2,
	};

	enum EItemUniqueSockets : uint8_t
	{
		SOCKET_UNIQUE_SAVE_TIME = SOCKET_MAX_NUM - 2,
		SOCKET_UNIQUE_REMAIN_TIME = SOCKET_MAX_NUM - 1
	};

	enum EItemType : uint8_t
	{
		TYPE_NONE,
		TYPE_WEAPON,
		TYPE_ARMOR,
		TYPE_USE,
		TYPE_AUTOUSE,
		TYPE_MATERIAL,
		TYPE_SPECIAL,
		TYPE_TOOL,
		TYPE_LOTTERY,
		TYPE_ELK,
		TYPE_METIN,
		TYPE_CONTAINER,
		TYPE_FISH,
		TYPE_ROD,
		TYPE_RESOURCE,
		TYPE_CAMPFIRE,
		TYPE_UNIQUE,
		TYPE_SKILLBOOK,
		TYPE_QUEST,
		TYPE_POLYMORPH,
		TYPE_TREASURE_BOX,
		TYPE_TREASURE_KEY,
		TYPE_SKILLFORGET,
		TYPE_GIFTBOX,
		TYPE_PICK,
		TYPE_HAIR,
		TYPE_TOTEM,
		TYPE_BLEND,
		TYPE_COSTUME,
		TYPE_DS,
		TYPE_SPECIAL_DS,
		TYPE_EXTRACT,
		TYPE_SECONDARY_COIN,
		TYPE_RING,
		TYPE_BELT,

		TYPE_MAX_NUM,
	};

	enum EWeaponSubTypes : uint8_t
	{
		WEAPON_SWORD,
		WEAPON_DAGGER,
		WEAPON_BOW,
		WEAPON_TWO_HANDED,
		WEAPON_BELL,
		WEAPON_FAN,
		WEAPON_ARROW,

		WEAPON_NUM_TYPES,
		WEAPON_NONE = WEAPON_NUM_TYPES + 1,
	};

	enum EArmorSubTypes : uint8_t
	{
		ARMOR_BODY,
		ARMOR_HEAD,
		ARMOR_SHIELD,
		ARMOR_WRIST,
		ARMOR_FOOTS,
		ARMOR_NECK,
		ARMOR_EAR,

		ARMOR_NUM_TYPES
	};

	enum EUseSubTypes : uint8_t
	{
		USE_POTION,
		USE_TALISMAN,
		USE_TUNING,
		USE_MOVE,
		USE_TREASURE_BOX,
		USE_MONEYBAG,
		USE_BAIT,
		USE_ABILITY_UP,
		USE_AFFECT,
		USE_CREATE_STONE,
		USE_SPECIAL,
		USE_POTION_NODELAY,
		USE_CLEAR,
		USE_INVISIBILITY,
		USE_DETACHMENT,
		USE_BUCKET,
		USE_POTION_CONTINUE,
		USE_CLEAN_SOCKET,
		USE_CHANGE_ATTRIBUTE,
		USE_ADD_ATTRIBUTE,
		USE_ADD_ACCESSORY_SOCKET,
		USE_PUT_INTO_ACCESSORY_SOCKET,
		USE_ADD_ATTRIBUTE2,
		USE_RECIPE,
		USE_CHANGE_ATTRIBUTE2,
		USE_BIND,
		USE_UNBIND,
		USE_TIME_CHARGE_PER,
		USE_TIME_CHARGE_FIX,
		USE_PUT_INTO_BELT_SOCKET,
		USE_PUT_INTO_RING_SOCKET,

		USE_NUM_TYPES
	};

	enum EDragonSoulSubType : uint8_t
	{
		DS_SLOT1,
		DS_SLOT2,
		DS_SLOT3,
		DS_SLOT4,
		DS_SLOT5,
		DS_SLOT6,
		DS_SLOT_MAX,
	};

	enum EExtractSubTypes : uint8_t
	{
		EXTRACT_DRAGON_SOUL,
		EXTRACT_DRAGON_HEART,
	};

	enum EDragonSoulGradeTypes : uint8_t
	{
		DRAGON_SOUL_GRADE_NORMAL,
		DRAGON_SOUL_GRADE_BRILLIANT,
		DRAGON_SOUL_GRADE_RARE,
		DRAGON_SOUL_GRADE_ANCIENT,
		DRAGON_SOUL_GRADE_LEGENDARY,

		DRAGON_SOUL_GRADE_MAX,
	};

	enum EDragonSoulStepTypes : uint8_t
	{
		DRAGON_SOUL_STEP_LOWEST,
		DRAGON_SOUL_STEP_LOW,
		DRAGON_SOUL_STEP_MID,
		DRAGON_SOUL_STEP_HIGH,
		DRAGON_SOUL_STEP_HIGHEST,
		DRAGON_SOUL_STEP_MAX,
	};

	enum EDSInventoryMaxNum : uint16_t
	{
		DRAGON_SOUL_INVENTORY_MAX_NUM = DS_SLOT_MAX * DRAGON_SOUL_GRADE_MAX * DRAGON_SOUL_BOX_SIZE,
	};

	enum ESealBind : uint8_t
	{
		SEAL_BIND_FLAG_DROP,
		SEAL_BIND_FLAG_UPGRADE,
		SEAL_BIND_FLAG_SELL,
		SEAL_BIND_FLAG_ENCHANT,
		SEAL_BIND_FLAG_TRADE,
		SEAL_BIND_FLAG_UNSEAL,

		SEAL_BIND_FLAG_MAX,
	};

	enum ESealDate : int8_t
	{
		SEAL_DATE_DEFAULT_TIMESTAMP = 0,
		SEAL_DATE_UNLIMITED_TIMESTAMP = -1,
	};

	enum ESealItem : uint32_t
	{
		SEAL_BINDING_VNUM = 50263,
		SEAL_UNBINDING_VNUM = 50264,
	};

	enum EAutoUseSubTypes : uint8_t
	{
		AUTOUSE_POTION,
		AUTOUSE_ABILITY_UP,
		AUTOUSE_BOMB,
		AUTOUSE_GOLD,
		AUTOUSE_MONEYBAG,
		AUTOUSE_TREASURE_BOX,

		AUTO_USE_NUM_TYPES
	};

	enum EMaterialSubTypes : uint8_t
	{
		MATERIAL_LEATHER,
		MATERIAL_BLOOD,
		MATERIAL_ROOT,
		MATERIAL_NEEDLE,
		MATERIAL_JEWEL,
		MATERIAL_DS_REFINE_NORMAL,
		MATERIAL_DS_REFINE_BLESSED,
		MATERIAL_DS_REFINE_HOLLY,

		MATERIAL_NUM_TYPES
	};

	enum ESpecialSubTypes : uint8_t
	{
		SPECIAL_MAP,
		SPECIAL_KEY,
		SPECIAL_DOC,
		SPECIAL_SPIRIT,

		SPECIAL_NUM_TYPES
	};

	enum EToolSubTypes : uint8_t
	{
		TOOL_FISHING_ROD,

		TOOL_NUM_TYPES
	};

	enum ELotterySubTypes : uint8_t
	{
		LOTTERY_TICKET, 
		LOTTERY_INSTANT,

		LOTERY_NUM_TYPES
	};

	enum EFishSubTypes : uint8_t
	{
		FISH_ALIVE,
		FISH_DEAD,

		FISH_NUM_TYPES
	};

	enum EResourceSubTypes : uint8_t
	{
		RESOURCE_FISHBONE,
		RESOURCE_WATERSTONEPIECE,
		RESOURCE_WATERSTONE,
		RESOURCE_BLOOD_PEARL,
		RESOURCE_BLUE_PEARL,
		RESOURCE_WHITE_PEARL,
		RESOURCE_BUCKET,
		RESOURCE_CRYSTAL,
		RESOURCE_GEM,
		RESOURCE_STONE,
		RESOURCE_METIN,
		RESOURCE_ORE,

		RESOURCE_NUM_TYPES
	};

	enum EUniqueSubTypes : uint8_t
	{
		UNIQUE_NONE,
		UNIQUE_BOOK,
		UNIQUE_SPECIAL_RIDE,
		UNIQUE_SPECIAL_MOUNT_RIDE,
	};

	enum ECostumeSubTypes : uint8_t
	{
		COSTUME_BODY,
		COSTUME_HAIR,

		COSTUME_NUM_TYPES,
	};

	enum EMetinSubTypes : uint8_t
	{
		METIN_NORMAL,
		METIN_GOLD,
	};

	enum ELimitTypes : uint8_t
	{
		LIMIT_NONE,
		LIMIT_LEVEL,
		LIMIT_STR,
		LIMIT_DEX,
		LIMIT_INT,
		LIMIT_CON,
		LIMIT_REAL_TIME,
		LIMIT_REAL_TIME_START_FIRST_USE,
		LIMIT_TIMER_BASED_ON_WEAR,
		LIMIT_MAX_LEVEL,

		LIMIT_MAX_NUM
	};

	enum EItemAntiFlag : uint32_t
	{
		ANTIFLAG_FEMALE		= (1 << 0),
		ANTIFLAG_MALE			= (1 << 1),
		ANTIFLAG_WARRIOR		= (1 << 2),
		ANTIFLAG_ASSASSIN		= (1 << 3),
		ANTIFLAG_SURA			= (1 << 4),
		ANTIFLAG_SHAMAN		= (1 << 5),
		ANTIFLAG_GET			= (1 << 6),
		ANTIFLAG_DROP			= (1 << 7),
		ANTIFLAG_SELL			= (1 << 8),
		ANTIFLAG_EMPIRE_A		= (1 << 9),
		ANTIFLAG_EMPIRE_B		= (1 << 10),
		ANTIFLAG_EMPIRE_R		= (1 << 11),
		ANTIFLAG_SAVE			= (1 << 12),
		ANTIFLAG_GIVE			= (1 << 13),
		ANTIFLAG_PKDROP		= (1 << 14),
		ANTIFLAG_STACK			= (1 << 15),
		ANTIFLAG_MYSHOP		= (1 << 16),
		ANTIFLAG_SAFEBOX		= (1 << 16),
	};

	enum EItemFlag : uint32_t
	{
		FLAG_REFINEABLE			= (1 << 0),
		FLAG_SAVE					= (1 << 1),
		FLAG_STACKABLE				= (1 << 2),
		FLAG_COUNT_PER_1GOLD		= (1 << 3),
		FLAG_SLOW_QUERY			= (1 << 4),
		FLAG_UNIQUE				= (1 << 5),
		FLAG_MAKECOUNT				= (1 << 6),
		FLAG_IRREMOVABLE			= (1 << 7),
		FLAG_CONFIRM_WHEN_USE		= (1 << 8),
		FLAG_QUEST_USE				= (1 << 9),
		FLAG_QUEST_USE_MULTIPLE	= (1 << 10),
		FLAG_QUEST_GIVE			= (1 << 11),
		FLAG_LOG					= (1 << 12),
		FLAG_APPLICABLE			= (1 << 13),
	};

	enum EWearPositions : uint8_t
	{
		WEAR_BODY,
		WEAR_HEAD,
		WEAR_FOOTS,
		WEAR_WRIST,
		WEAR_WEAPON,
		WEAR_NECK,
		WEAR_EAR,
		WEAR_UNIQUE1,
		WEAR_UNIQUE2,
		WEAR_ARROW,
		WEAR_SHIELD,

		WEAR_MAX_NUM
	};

	enum EItemWearableFlag : uint16_t
	{
		WEARABLE_BODY		= (1 << 0),
		WEARABLE_HEAD		= (1 << 1),
		WEARABLE_FOOTS		= (1 << 2),
		WEARABLE_WRIST		= (1 << 3),
		WEARABLE_WEAPON		= (1 << 4),
		WEARABLE_NECK		= (1 << 5),
		WEARABLE_EAR		= (1 << 6),
		WEARABLE_UNIQUE		= (1 << 7),
		WEARABLE_SHIELD		= (1 << 8),
		WEARABLE_ARROW		= (1 << 9),
		WEARABLE_HAIR		= (1 << 10),
		WEARABLE_ABILITY	= (1 << 11),
	};


	enum EImmuneFlags : uint32_t
	{
		IMMUNE_STUN = (1 << 0),
		IMMUNE_SLOW = (1 << 1),
		IMMUNE_FALL = (1 << 2),
		IMMUNE_CURSE = (1 << 3),
		IMMUNE_POISON = (1 << 4),
		IMMUNE_TERROR = (1 << 5),
		IMMUNE_REFLECT = (1 << 6),
	};

	enum EApplyTypes : uint8_t
	{
		APPLY_NONE,
		APPLY_MAX_HP,
		APPLY_MAX_SP,
		APPLY_CON,
		APPLY_INT,
		APPLY_STR,
		APPLY_DEX,
		APPLY_ATT_SPEED,
		APPLY_MOV_SPEED,
		APPLY_CAST_SPEED,
		APPLY_HP_REGEN,
		APPLY_SP_REGEN,
		APPLY_POISON_PCT,
		APPLY_STUN_PCT,
		APPLY_SLOW_PCT,
		APPLY_CRITICAL_PCT,
		APPLY_PENETRATE_PCT,
		APPLY_ATTBONUS_HUMAN,
		APPLY_ATTBONUS_ANIMAL,
		APPLY_ATTBONUS_ORC,
		APPLY_ATTBONUS_MILGYO,
		APPLY_ATTBONUS_UNDEAD,
		APPLY_ATTBONUS_DEVIL,
		APPLY_STEAL_HP,
		APPLY_STEAL_SP,
		APPLY_MANA_BURN_PCT,
		APPLY_DAMAGE_SP_RECOVER,
		APPLY_BLOCK,
		APPLY_DODGE,
		APPLY_RESIST_SWORD,
		APPLY_RESIST_TWOHAND,
		APPLY_RESIST_DAGGER,
		APPLY_RESIST_BELL,
		APPLY_RESIST_FAN,
		APPLY_RESIST_BOW,
		APPLY_RESIST_FIRE,
		APPLY_RESIST_ELEC,
		APPLY_RESIST_MAGIC,
		APPLY_RESIST_WIND,
		APPLY_REFLECT_MELEE,
		APPLY_REFLECT_CURSE,
		APPLY_POISON_REDUCE,
		APPLY_KILL_SP_RECOVER,
		APPLY_EXP_DOUBLE_BONUS,
		APPLY_GOLD_DOUBLE_BONUS,
		APPLY_ITEM_DROP_BONUS,
		APPLY_POTION_BONUS,
		APPLY_KILL_HP_RECOVER,
		APPLY_IMMUNE_STUN,
		APPLY_IMMUNE_SLOW,
		APPLY_IMMUNE_FALL,
		APPLY_SKILL,
		APPLY_BOW_DISTANCE,
		APPLY_ATT_GRADE_BONUS,
		APPLY_DEF_GRADE_BONUS,
		APPLY_MAGIC_ATT_GRADE,
		APPLY_MAGIC_DEF_GRADE,
		APPLY_CURSE_PCT,
		APPLY_MAX_STAMINA,
		APPLY_ATT_BONUS_TO_WARRIOR,
		APPLY_ATT_BONUS_TO_ASSASSIN,
		APPLY_ATT_BONUS_TO_SURA,
		APPLY_ATT_BONUS_TO_SHAMAN,
		APPLY_ATT_BONUS_TO_MONSTER,
		APPLY_MALL_ATTBONUS,
		APPLY_MALL_DEFBONUS,
		APPLY_MALL_EXPBONUS,
		APPLY_MALL_ITEMBONUS,
		APPLY_MALL_GOLDBONUS,
		APPLY_MAX_HP_PCT,
		APPLY_MAX_SP_PCT,
		APPLY_SKILL_DAMAGE_BONUS,
		APPLY_NORMAL_HIT_DAMAGE_BONUS,
		APPLY_SKILL_DEFEND_BONUS,
		APPLY_NORMAL_HIT_DEFEND_BONUS,
		APPLY_EXTRACT_HP_PCT,
		APPLY_PC_BANG_EXP_BONUS,
		APPLY_PC_BANG_DROP_BONUS,
		APPLY_RESIST_WARRIOR,
		APPLY_RESIST_ASSASSIN,
		APPLY_RESIST_SURA,
		APPLY_RESIST_SHAMAN,
		APPLY_ENERGY,
		APPLY_DEF_GRADE,
		APPLY_COSTUME_ATTR_BONUS,
		APPLY_MAGIC_ATTBONUS_PER,
		APPLY_MELEE_MAGIC_ATTBONUS_PER,
		APPLY_RESIST_ICE,
		APPLY_RESIST_EARTH,
		APPLY_RESIST_DARK,
		APPLY_ANTI_CRITICAL_PCT,
		APPLY_ANTI_PENETRATE_PCT,

		MAX_APPLY_NUM
	};
}