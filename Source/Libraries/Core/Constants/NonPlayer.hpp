#pragma once
#include <cstdint>

enum ECharType
{
	CHAR_TYPE_MONSTER,
	CHAR_TYPE_NPC,
	CHAR_TYPE_STONE,
	CHAR_TYPE_WARP,
	CHAR_TYPE_DOOR,
	CHAR_TYPE_BUILDING,
	CHAR_TYPE_PC,
	CHAR_TYPE_POLYMORPH_PC,
	CHAR_TYPE_HORSE,
	CHAR_TYPE_GOTO,

	// Client only
	CHAR_TYPE_OBJECT,
	CHAR_TYPE_RENDER_TARGET,
};

namespace MOB
{

	enum ENonPlayerDataControls : uint8_t
	{
		ATTRIBUTE_MAX_NUM = 12,
		SKILL_MAX_NUM = 5,
	};

	enum EMobRank : uint8_t
	{
		RANK_PAWN,
		RANK_S_PAWN,
		RANK_KNIGHT,
		RANK_S_KNIGHT,
		RANK_BOSS,
		RANK_KING,

		RANK_MAX_NUM
	};

	enum ERaceFlags : uint32_t
	{
		RACE_FLAG_ANIMAL = (1 << 0),
		RACE_FLAG_UNDEAD = (1 << 1),
		RACE_FLAG_DEVIL = (1 << 2),
		RACE_FLAG_HUMAN = (1 << 3),
		RACE_FLAG_ORC = (1 << 4),
		RACE_FLAG_MILGYO = (1 << 5),
		RACE_FLAG_INSECT = (1 << 6),
		RACE_FLAG_FIRE = (1 << 7),
		RACE_FLAG_ICE = (1 << 8),
		RACE_FLAG_DESERT = (1 << 9),
		RACE_FLAG_TREE = (1 << 10),
		RACE_FLAG_ATT_ELEC = (1 << 11),
		RACE_FLAG_ATT_FIRE = (1 << 12),
		RACE_FLAG_ATT_ICE = (1 << 13),
		RACE_FLAG_ATT_WIND = (1 << 14),
		RACE_FLAG_ATT_EARTH = (1 << 15),
		RACE_FLAG_ATT_DARK = (1 << 16),
	};

	enum EBattleType : uint8_t
	{
		BATTLE_TYPE_MELEE,
		BATTLE_TYPE_RANGE,
		BATTLE_TYPE_MAGIC,
		BATTLE_TYPE_SPECIAL,
		BATTLE_TYPE_POWER,
		BATTLE_TYPE_TANKER,
		BATTLE_TYPE_SUPER_POWER,
		BATTLE_TYPE_SUPER_TANKER,

		BATTLE_TYPE_MAX_NUM
	};

	enum EMobSizes : uint8_t
	{
		SIZE_RESERVED,
		SIZE_SMALL,
		SIZE_MEDIUM,
		SIZE_BIG
	};

	enum EAIFlags
	{
		AIFLAG_AGGRESSIVE = (1 << 0),
		AIFLAG_NOMOVE = (1 << 1),
		AIFLAG_COWARD = (1 << 2),
		AIFLAG_NOATTACKSHINSU = (1 << 3),
		AIFLAG_NOATTACKJINNO = (1 << 4),
		AIFLAG_NOATTACKCHUNJO = (1 << 5),
		AIFLAG_ATTACKMOB = (1 << 6),
		AIFLAG_BERSERK = (1 << 7),
		AIFLAG_STONESKIN = (1 << 8),
		AIFLAG_GODSPEED = (1 << 9),
		AIFLAG_DEATHBLOW = (1 << 10),
		AIFLAG_REVIVE = (1 << 11),
	};

	enum EMobStatType : uint8_t
	{
		MOB_STATTYPE_POWER,
		MOB_STATTYPE_TANKER,
		MOB_STATTYPE_SUPER_POWER,
		MOB_STATTYPE_SUPER_TANKER,
		MOB_STATTYPE_RANGE,
		MOB_STATTYPE_MAGIC,
		MOB_STATTYPE_MAX_NUM
	};

	enum EMobImmuneFlags : uint16_t
	{
		IMMUNE_STUN = (1 << 0),
		IMMUNE_SLOW = (1 << 1),
		IMMUNE_FALL = (1 << 2),
		IMMUNE_CURSE = (1 << 3),
		IMMUNE_POISON = (1 << 4),
		IMMUNE_TERROR = (1 << 5),
		IMMUNE_REFLECT = (1 << 6),
	};

	enum EMobEnchants : uint8_t
	{
		ENCHANT_CURSE,
		ENCHANT_SLOW,
		ENCHANT_POISON,
		ENCHANT_STUN,
		ENCHANT_CRITICAL,
		ENCHANT_PENETRATE,
		ENCHANTS_MAX_NUM
	};

	enum EMobResists : uint8_t
	{
		RESIST_SWORD,
		RESIST_TWOHAND,
		RESIST_DAGGER,
		RESIST_BELL,
		RESIST_FAN,
		RESIST_BOW,
		RESIST_FIRE,
		RESIST_ELECT,
		RESIST_MAGIC,
		RESIST_WIND,
		RESIST_POISON,
		RESISTS_MAX_NUM
	};
}